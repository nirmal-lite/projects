
//////////////////////////////////////////////////////////////////////////////////

`timescale 1ns / 1ps

module processor(input clk1, input clk2);
    reg [31:0] PC,IF_ID_IR, IF_ID_NPC,ID_EX_NPC,ID_EX_IR,ID_EX_A,ID_EX_B,ID_EX_Imm;
    reg [2:0] ID_EX_TYP ,EX_MEM_TYP,EX_MEM_TYP,EX_MEM_IR,MEM_WB_TYP;
    reg EX_MEM_COND;
    reg [31:0] MEM_WB_IR,MEM_WB_ALUout,MEM_WB_ALUout,MEM_WB_LMD,EX_MEM_ALUOut,EX_MEM_B;
    reg [31:0] Register[0:31];
    reg [31:0] memory[0:1023];
    
    
    parameter ADD =6'd0,SUB=6'D1,AND=6'D2,OR=6'D3,SLT=6'D4,MUL=6'D5,HLT=6'D63,
              LW=6'D8,SW=6'D9,ADDI=6'D10,SUBI=6'D11,SLTI=6'D12,
              BNEQZ=6'D13,BEQZ=6'D14;
    
   parameter RR_ALU=3'D0,RM_ALU=3'D1,LOAD=3'D2,STORE=3'D3,BRANCH=3'D4,HALT=3'D5;
    
   reg HALTED;
   reg TAKEN_BRANCH;
   
    always @(posedge clk1)// IF stage
        if (HALTED==0)
        begin
            if(((EX_MEM_IR[31:26]==BEQZ||EX_MEM_IR[31:26]==BNEQZ)&& (EX_MEM_COND ==1)))
              begin
                IF_ID_IR        <= #2 memory[EX_MEM_ALUOut];
                TAKEN_BRANCH    <= #2 1;
                IF_ID_NPC       <= #2 EX_MEM_ALUOut+1;
                PC              <= #2 EX_MEM_ALUOut+1;
                
                
              end
            else 
              begin 
                IF_ID_IR        <= #2 memory[PC];
                IF_ID_NPC       <= #2 PC+ 1;
                PC              <= #2 PC+1;
                
              end
              
            
        end
    always @ (posedge clk2) // ID Stage
           
            if (HALTED == 0)
            begin
                if (IF_ID_IR [25:21] == 5'b00000) ID_EX_A <= 0;
                else ID_EX_A <= #2 Register[IF_ID_IR [25:21]]; // "rs"
                if (IF_ID_IR [20:16] == 5'b00000) ID_EX_B <= 0;
                else ID_EX_B <= #2 Register [IF_ID_IR [20:16]]; // "rt"
                ID_EX_NPC <= #2 IF_ID_NPC;
                ID_EX_IR <= #2 IF_ID_IR;
                ID_EX_Imm <= #2 {{16{IF_ID_IR[15]}}, {IF_ID_IR[15:0]}};
                    
              
             case (IF_ID_IR [31:26])
                    ADD, SUB, AND, OR, SLT, MUL: ID_EX_TYP<=#2 RR_ALU;
                    
                    ADDI, SUBI, SLTI:            ID_EX_TYP <= #2 RM_ALU;
                    
                    LW:                           ID_EX_TYP <= #2 LOAD;
                   
                    SW:                           ID_EX_TYP <= #2 STORE;
                    
                    BNEQZ, BEQZ:                  ID_EX_TYP <= #2 BRANCH;
                    
                    HLT:                          ID_EX_TYP <= #2 HALT;
          
                    default:                       ID_EX_TYP <= #2 HALT;
                    // Invalid opcodlte
              endcase
            end
    always @(posedge clk1) //EX State
        if (HALTED ==0)
                begin
                EX_MEM_TYP <= #2 ID_EX_TYP;
                
                EX_MEM_IR  <= #2 ID_EX_IR;
                
                TAKEN_BRANCH <= #2 0;
                  case (ID_EX_TYP)
                      RR_ALU: 
                         begin
                            case (ID_EX_IR[31:26]) // "opcode"
                                ADD: EX_MEM_ALUOut <= #2 ID_EX_A + ID_EX_B;
    
                                SUB: EX_MEM_ALUOut <= #2 ID_EX_A - ID_EX_B; 
                                 
                                AND: EX_MEM_ALUOut <= #2 ID_EX_A & ID_EX_B;
                                
                                OR:  EX_MEM_ALUOut <= #2 ID_EX_A | ID_EX_B;
                                
                                SLT:  EX_MEM_ALUOut <= #2 ID_EX_A < ID_EX_B;
                                
                                MUL:  EX_MEM_ALUOut <= #2 ID_EX_A * ID_EX_B;
                                
                                default: EX_MEM_ALUOut <= #2 32'hxxxxxxxx;
                            endcase
                          end
                       RM_ALU:
                            begin
                                case (ID_EX_IR [31:26]) // "opcode"
                                    ADDI: EX_MEM_ALUOut <= #2 ID_EX_A + ID_EX_Imm;
                                    SUBI: EX_MEM_ALUOut <= #2 ID_EX_A -ID_EX_Imm;
                                    SLTI: EX_MEM_ALUOut <= #2 ID_EX_A <ID_EX_Imm;
                                    default: EX_MEM_ALUOut <= #2 32'hxxxxxxxx;
                                endcase
                             end  
                        LOAD, STORE:
                                    begin
                                    EX_MEM_ALUOut <=#2 ID_EX_A + ID_EX_Imm;
                                    EX_MEM_B <= #2 ID_EX_B;
                                    end
                        BRANCH: 
                                    begin
                                    EX_MEM_ALUOut <= #2 ID_EX_NPC + ID_EX_Imm;
                                    EX_MEM_COND <= #2 (ID_EX_A == 0);
                                    end
                                    
                 endcase
            end
    always @ (posedge clk2) //MEM Stage
       if (HALTED == 0)
        begin
            MEM_WB_TYP <= #2 EX_MEM_TYP;
            MEM_WB_IR  <= #2 EX_MEM_IR;
            case (EX_MEM_TYP) 
                RR_ALU, RM_ALU: MEM_WB_ALUout<=#2 EX_MEM_ALUOut;
                LOAD:           MEM_WB_LMD <= #2 memory[EX_MEM_ALUOut];
                STORE:          if (TAKEN_BRANCH == 0)// Disable write
                                   memory[EX_MEM_ALUOut]<=#2 EX_MEM_B;
            
         
            endcase
        end
    always @ (posedge clk1) // WB Stage
            begin
            if (TAKEN_BRANCH == 0) // Disable write if branch taken
                case (MEM_WB_TYP)
                    RR_ALU:  Register [MEM_WB_IR[15:11]] <= #2 MEM_WB_ALUout; // "rd"
                    RM_ALU:  Register [MEM_WB_IR [20:16]] <= #2 MEM_WB_ALUout; // "rt"
                    LOAD:
                          Register [MEM_WB_IR [20:16]] <= #2 MEM_WB_LMD; // "rt"
                    HALT:
                       HALTED <= #232 1'b1;
                endcase
            end
               
        
    
    
endmodule

